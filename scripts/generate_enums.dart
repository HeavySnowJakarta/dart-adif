// This script generates ADIF's built-in enumerations.

// TODO: Add support for getting original data.

import 'dart:io';

void main() {
  // Open the files.
  final inputFile = File('enums.csv');
  final enums = File('../lib/src/data_types/enum_auto.dart');

  // Read from the source.
  print("Generating Dart codes of QSO fields...");
  print("Reading the CSV file...");
  final String inputContent = inputFile.readAsStringSync();

  // Generate the target string.
  String enumsContent = """
/// The enumerates of ADIF-defined QSO fields, generated by
/// `scripts/generate_enums.dart`. Don't edit this file by hand.
library;

import './basics.dart';
""";

  // Parse fields from the read data.
  for (final line in inputContent.trim().split('\n')) {
    // Parse the fields.
    final parts = line.split('|');
    final enumNameUpperSnake = parts[0].trim();
    final enumValues = parts[1].trim();
    final enumValuesList = enumValues.split(',').map((e) => e.trim()).toList();

    // Write to the implement file.
    enumsContent += """

const list$enumNameUpperSnake = [
${enumValuesList.map((e) => "  '$e',").join('\n')}
];

class Adif$enumNameUpperSnake extends AdifEnumeration {
  Adif$enumNameUpperSnake(String value) : super(value, list$enumNameUpperSnake);
  
  static Adif$enumNameUpperSnake fromString(String str) {
    return Adif$enumNameUpperSnake(str);
  }
}
""";
  }

  // Create the target files.
  print("Reading and parsing finished. Now writing...");
  if (!enums.existsSync()) {
    enums.createSync();
  }

  // Write to the files.
  enums.writeAsStringSync(enumsContent);

  print("Everything finished.");
}
